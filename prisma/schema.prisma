// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Use SQLite for local development, PostgreSQL for production
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with subscription readiness
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  password      String?  // For credentials login
  emailVerified DateTime?
  mobile        String?  @unique // Mobile number for OTP verification
  mobileVerified DateTime? // Mobile verification timestamp
  role          String   @default("TRADER") // TRADER, ADMIN, SUPER_ADMIN
  status        String   @default("ACTIVE") // ACTIVE, SUSPENDED, DELETED
  
  // Profile fields
  bio           String?
  timezone      String?   @default("UTC")
  defaultRiskRatio Float? @default(2.0)
  tradingExperience String? // "BEGINNER", "INTERMEDIATE", "ADVANCED"
  
  // Subscription fields (for future)
  subscriptionStatus String @default("FREE") // FREE, ACTIVE, PAST_DUE, CANCELED, EXPIRED
  subscriptionPlan   String?            @default("free")
  subscriptionEnd    DateTime?
  tradeLimit         Int?               @default(50) // Free tier limit
  
  // Relations
  trades        Trade[]
  accounts      Account[]
  sessions      Session[]
  
  // Tracking
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  
  // Critical indexes for performance
  @@index([email])
  @@index([role])
  @@index([status])
  @@index([role, status])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("users")
}

// Using String instead of enums for SQLite compatibility

// Enhanced Trade model
model Trade {
  id              Int      @id @default(autoincrement())
  symbol          String
  type            String   // "LONG" or "SHORT"
  instrumentType  String   @default("STOCK") // "STOCK", "FUTURES", "OPTIONS"
  entryPrice      Float
  exitPrice       Float?
  quantity        Float
  strikePrice     Float?   // For options
  expiryDate      DateTime? // For futures and options
  optionType      String?  // "CALL" or "PUT" for options
  premium         Float?   // For options
  entryDate       DateTime
  exitDate        DateTime?
  profitLoss      Float?
  notes           String?
  sector          String?
  
  // New fields for enhanced features
  strategy        String?  // Strategy name/tag
  setupImageUrl   String?  // URL to trade setup screenshot
  setupDescription String? // Description of the trade setup
  preTradeEmotion String?  // Emotional state before trade
  postTradeEmotion String? // Emotional state after trade
  tradeConfidence Int?     // Confidence level (1-10)
  confidenceLevel Int?     // Alternative field name for confidence (1-10)
  tradeRating     Int?     // Self-rating of trade execution (1-10)
  rating          Int?     // Alternative field name for rating (1-5)
  lessons         String?  // Lessons learned from the trade
  lessonsLearned  String?  // Alternative field name for lessons learned
  riskRewardRatio Float?   // Planned risk-reward ratio
  stopLoss        Float?   // Initial stop loss price
  targetPrice     Float?   // Initial target price
  timeFrame       String?  // Time frame used for analysis (e.g., "5m", "1h", "Daily")
  marketCondition String?  // Overall market condition (e.g., "Bullish", "Bearish", "Sideways")
  
  // User relation
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Demo/Real trade flag
  isDemo        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Enhanced indexes for better query performance
  @@index([userId])
  @@index([userId, entryDate])
  @@index([userId, isDemo])
  @@index([userId, createdAt])
  @@index([userId, exitDate])
  @@index([userId, type])
  @@index([userId, symbol])
  @@index([userId, instrumentType])
  @@index([symbol, entryDate])
  @@index([entryDate])
  @@index([exitDate])
  @@index([instrumentType])
  @@index([type])
  @@index([profitLoss])
  @@index([createdAt])
  @@index([userId, entryDate, exitDate])
  @@index([userId, isDemo, entryDate])
  @@index([userId, type, entryDate])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Audit log for admin oversight
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  // Null if system action
  action    String   // "CREATE_TRADE", "DELETE_USER", etc.
  resource  String   // "Trade", "User", etc.
  resourceId String? // ID of affected resource
  metadata  String?  // Additional context (JSON string)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

// OTP verification for mobile numbers
model OTPVerification {
  id        String   @id @default(cuid())
  mobile    String   // Mobile number
  otp       String   // OTP code
  purpose   String   // "REGISTRATION", "LOGIN", "PASSWORD_RESET"
  verified  Boolean  @default(false)
  attempts  Int      @default(0) // Number of verification attempts
  expiresAt DateTime // OTP expiration time
  createdAt DateTime @default(now())
  
  @@index([mobile])
  @@index([mobile, purpose])
  @@index([expiresAt])
  @@map("otp_verifications")
} 